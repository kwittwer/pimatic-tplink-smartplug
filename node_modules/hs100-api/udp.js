// {"system":{"set_dev_alias":{"alias":"New Name"}}}
// {"system":{"set_dev_location":{"longitude":-122.4112762884446,"latitude":37.7726336662078}}}
// {"time":{"set_timezone":{"hour":16,"min":59,"sec":36,"month":7,"year":2016,"mday":18,"index":6}}}
// {"cnCloud":{"bind":{"timeout":20,"username":"<user-in-clear>","password":"<password-in-clear>"}}}
// {"emeter":{"get_daystat":{"year":2016,"month":7}},"schedule":{"get_daystat":{"year":2016,"month":7}}}
// {"emeter":{"get_daystat":{"day_list":[{"year":2016,"month":7,"day":18,"energy":0.002000}],"err_code":0}},"schedule":{"get_daystat":{"day_list":[{"year":2016,"month":7,"day":18,"time":186}],"err_code":0}}}
// {"schedule":{"set_overall_enable":{"enable":1}}}
// {"schedule":{"add_rule":{"sact":0,"enable":1,"stime_opt":0,"etime_opt":-1,"smin":849,"repeat":true,"day":19,"wday":[false,true,true,true,true,true,false],"eact":-1,"year":2016,"month":7,"emin":0,"name":"name"}}}
// {"schedule":{"add_rule":{"sact":1,"enable":1,"stime_opt":0,"etime_opt":-1,"smin":729,"repeat":false,"day":19,"wday":[0,0,1,0,0,0,0],"eact":-1,"year":2016,"month":7,"emin":0,"name":"name"}}}
// {"schedule":{"add_rule":{"sact":0,"enable":1,"stime_opt":0,"etime_opt":-1,"smin":670,"repeat":true,"day":19,"wday":[true,true,true,true,true,true,true],"eact":-1,"year":2016,"month":7,"emin":0,"name":"name"}}}
// {"anti_theft":{"set_overall_enable":{"enable":1}}}
// {"anti_theft":{"add_rule":{"id":"","enable":1,"etime_opt":0,"stime_opt":0,"smin":1270,"frequency":5,"repeat":1,"day":0,"wday":[false,true,true,true,false,false,false],"year":0,"month":0,"emin":1288,"name":""}}}
// {"anti_theft":{"edit_rule":{"id":"6FFD6FDC6ADD5FDF665A10C0A71315E4","enable":0,"etime_opt":0,"stime_opt":0,"smin":1270,"frequency":5,"repeat":1,"day":0,"wday":[0,1,1,1,0,0,0],"year":0,"month":0,"emin":1288,"name":""}}}
// {"count_down":{"add_rule":{"enable":true,"delay":300,"act":1,"name":"My countdown"}}}

const dgram = require('dgram');
const socket = dgram.createSocket('udp4');

socket.on('error', (err) => {
  console.error('LIFX Client UDP error');
  console.trace(err);
  socket.close();
// this.emit('error', err)
});

socket.on('message', (msg, rinfo) => {
  // Ignore own messages and false formats
  // if (utils.getHostIPs().indexOf(rinfo.address) >= 0 || !Buffer.isBuffer(msg)) {
  //   return
  // }

  console.log('DEBUG - ' + msg.toString('hex') + ' from ' + rinfo.address);

// Parse packet to object
// var parsedMsg = Packet.toObject(msg)
//
// // Check if packet is read successfully
// if (parsedMsg instanceof Error) {
//   console.error('LIFX Client invalid packet header error')
//   console.error('Packet: ', msg.toString('hex'))
//   console.trace(parsedMsg)
// } else {
//   // Convert type before emitting
//   var messageTypeName = _.result(_.find(Packet.typeList, {id: parsedMsg.type}), 'name')
//   if (messageTypeName !== undefined) {
//     parsedMsg.type = messageTypeName
//   }
//   // Check for handlers of given message and rinfo
//   this.processMessageHandlers(parsedMsg, rinfo)
//
//   this.emit('message', parsedMsg, rinfo)
// }
});

socket.bind(9999, 'localhost', () => {
  socket.setBroadcast(true);

  // Start scanning

  if (typeof callback === 'function') {
    // return callback()
  }
});

socket.send('Hello', 9999, '255.255.255.255', () => {
  console.log('sending');
});

//
// server.on('error', (err) => {
//   console.log(`server error:\n${err.stack}`)
//   server.close()
// })
//
// server.on('message', (msg, rinfo) => {
//   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`)
// })
//
// server.on('listening', () => {
//   var address = server.address()
//   console.log(`server listening ${address.address}:${address.port}`)
// })
//
// server.bind(41234)
// server listening 0.0.0.0:41234
